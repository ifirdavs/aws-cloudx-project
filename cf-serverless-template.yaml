# Project name: davis

## 1. Parameter name must only contain alphanumeric characters.
## 2. CF automatically performs topological sorting of resources.
## 3. ALWAYS create a change set before updating a stack.

Parameters:
  MyIpAddress:
    Type: String
    Description: CIDR range allowed to SSH in
    Default: 94.158.60.191/32
    AllowedPattern: ^(?:\d{1,3}\.){3}\d{1,3}\/\d{1,2}$
  

  davisAMI:
    Type: AWS::EC2::Image::Id
    Default: ami-00ca32bbc84273381    # Quickstart Amazon Linux 2023 kernel-6.1 AMI 
    Description: AMI ID for the EC2 custom Linux image.
  davisEC2InstanceType:
    Type: String
    Description: EC2 instance type for launch template
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro
      - t3a.micro
  davisEC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    Default: sshkey-windows
  davisEC2InstanceProfile:    # Instance Profile (Role) for EC2 to access S3, SQS, SNS, and Lambda functions
    Type: String
    Default: FullS3SqsSnsLambdaAccess
    Description: Existing IAM Instance Profile for Auto Scaling Group instances
  

  dbuser:
    Type: String
    Default: postgresmaster
  dbpassword:
    Type: String
    Default: postgresmaster
    NoEcho: true    # sensitive
  UseIAMAuth:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  dbport:
    Type: String
    Default: '5432'
  dbname:
    Type: String
    Default: postgres
  

  davisS3Bucket:     # S3 Bucket name for application uploads
    Type: String
    Default: fastapirdsbucket
  
  sourceCodeS3Bucket:
    Type: String
    Default: firdavsbekbucket1


Resources:
###  VPC & Networking  ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: davis-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: davis-InternetGateway
  VPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      MapPublicIpOnLaunch: true    # Enable public IP assignment for testing purposes
      Tags:
        - Key: Name
          Value: davis-PublicSubnet-A

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.12.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      MapPublicIpOnLaunch: true    # Enable public IP assignment for testing purposes
      Tags:
        - Key: Name
          Value: davis-PublicSubnet-B

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.13.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: davis-PrivateSubnet-A

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.14.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: davis-PrivateSubnet-B

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: davis-PrivateRouteTable
  
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: davis-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCIGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable


###  EC2 Template  ###
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS from anywhere, SSH from my IP only
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIpAddress
      Tags:
        - Key: Name
          Value: davis-ec2-SecurityGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: davis-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref davisAMI        # !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'    - Use SSM Parameter Store for latest AMI
        InstanceType: !Ref davisEC2InstanceType
        KeyName: !Ref davisEC2KeyPair
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        IamInstanceProfile:
          Name: !Ref davisEC2InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #cloud-boothook
            #!/bin/bash
            
            yum update -y
            
            # Set environment variables
            echo "DB_USER=${dbuser}" >> /etc/environment
            echo "DB_PASSWORD=${dbpassword}" >> /etc/environment
            echo "USE_IAM_AUTH=${UseIAMAuth}" >> /etc/environment
            echo "DB_HOST=${RDSInstance.Endpoint.Address}" >> /etc/environment
            echo "DB_PORT=${dbport}" >> /etc/environment
            echo "DB_NAME=${dbname}" >> /etc/environment
            echo "S3_BUCKET_NAME=${davisS3Bucket}" >> /etc/environment
            echo "AWS_REGION=${AWS::Region}" >> /etc/environment
            echo "SNS_UPLOAD_TOPIC_ARN=${SnsUploadTopic.TopicArn}" >> /etc/environment
            echo "SQS_QUEUE_URL=${SqsQueue.QueueUrl}" >> /etc/environment
            echo "HOST=${LoadBalancer.DNSName}" >> /etc/environment
            echo "CONSISTENCY_LAMBDA_ARN=${DataConsistencyFunction.Arn}" >> /etc/environment

            mkdir /home/ec2-user/project
            aws s3 cp s3://${sourceCodeS3Bucket}/project/ /home/ec2-user/project --recursive
            cd /home/ec2-user/project
            
            python3 -m venv .venv
            source .venv/bin/activate
            pip install -r requirements.txt

            sudo bash -c "nohup .venv/bin/uvicorn main:app --host 0.0.0.0 --port 80 > uvicorn.log 2>&1 & sleep 1"
      TagSpecifications:
        - ResourceType: launch-template
          Tags:
            - Key: Name
              Value: davis-LaunchTemplate

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: davis-AutoScalingGroup
          PropagateAtLaunch: true
  CPUUtilizationScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 50

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: davis-LoadBalancer
      Type: application
      Scheme: internet-facing   # other options: internal
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: davis-LoadBalancer

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: davis-TargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: davis-TargetGroup

###  RDS Database  ###
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow PostgreSQL access from EC2 instances Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: davis-rds-SecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnetA     # A DB subnet group has subnets in at least two Availability Zones in its AWS Region.
        - !Ref PrivateSubnetB     # Both subnets must be created beforehand (/24 recommended) and in the same VPC.
      Tags:
        - Key: Name
          Value: davis-rds-DBSubnetGroup

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: davis-rds
      Engine: postgres
      EngineVersion: '17.4'
      DBInstanceClass: db.t4g.micro
      MasterUsername: !Ref dbuser
      MasterUserPassword: !Ref dbpassword
      AllocatedStorage: 20
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      AvailabilityZone: us-east-1a
      MultiAZ: false
      BackupRetentionPeriod: 0   # Disable backups for free tier
      DeletionProtection: false  # Allow deletion for testing
      Tags:
        - Key: Name
          Value: davis-rds

  
###  SNS Topic  ###
  SnsUploadTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: davis-UploadsNotificationTopic
      DisplayName: CloudX Image Upload
      Tags:
        - Key: Name
          Value: davis-UploadsNotificationTopic

###  SQS Queue  ###
  SqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: davis-UploadsNotificationQueue
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600    # 4 days
      ReceiveMessageWaitTimeSeconds: 0
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SqsDeadLetterQueue.Arn
        maxReceiveCount: 10
      Tags:
        - Key: Name
          Value: davis-UploadsNotificationQueue

  SqsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: davis-UploadsNotificationQueue-DLQ
      VisibilityTimeout: 30
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Name
          Value: davis-UploadsNotificationQueue-DLQ


###  Lambda Functions  ###
  UploadsNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: davis-UploadsNotificationFunction
      Runtime: python3.13
      Architectures: [ x86_64 ]
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/FullSNSBasicLambda
      Handler: lambda_function_sqs2sns.lambda_handler          # <module>.<function>
      Code:
        S3Bucket: !Ref sourceCodeS3Bucket
        S3Key: project/lambda_function_sqs2sns.zip
        # S3ObjectVersion: <optional version id if bucket is versioned>
      Environment:
        Variables:
          # No need for AWS_REGION as it's already reserved and defined automatically based on Lambda region.
          SNS_UPLOAD_TOPIC_ARN: !GetAtt SnsUploadTopic.TopicArn 
          HOST: !GetAtt LoadBalancer.DNSName
      Tags:
        - Key: Name
          Value: davis-UploadsNotificationFunction

  SqsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !Ref UploadsNotificationFunction
      EventSourceArn: !GetAtt SqsQueue.Arn
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 20
      Enabled: true


  DataConsistencyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: davis-DataConsistencyFunction
      Runtime: python3.13
      Architectures: [ x86_64 ]
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/FullS3BasicLambda
      Handler: lambda_function_consistency.lambda_handler          # <module>.<function>
      Timeout: 5      # set this based on expected execution time
      Code:
        S3Bucket: !Ref sourceCodeS3Bucket
        S3Key: project/lambda_function_consistency.zip
      VpcConfig:     # Attach the function to your VPC by specifying subnets & SG
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
      Environment:
        Variables:
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          DB_PORT: !Ref dbport
          DB_USER: !Ref dbuser
          DB_PASSWORD: !Ref dbpassword
          DB_NAME: !Ref dbname
          S3_BUCKET_NAME: !Ref davisS3Bucket
      Tags:
        - Key: Name
          Value: davis-DataConsistencyFunction

  S3GatewayEndpoint:    # For Lambda function in Private Subnets A,B to access S3
  Type: AWS::EC2::VPCEndpoint
  Properties:
    VpcId: !Ref VpcId
    VpcEndpointType: Gateway
    ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
    RouteTableIds:
      - !Ref PrivateRouteTable      # Had to create a separate route table for private subnets as there is no built-in !GetAtt VPC.DefaultRouteTable

  EventBridgeScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: davis-DataConsistencyScheduleRule
      Description: "Run DataConsistencyFunction every 5 minutes"
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Id: DataConsistencyFunctionTarget
          Arn: !GetAtt DataConsistencyFunction.Arn

  # Allow EventBridge to invoke the Lambda
  LambdaPermissionForEventBridgeScheduleRule:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataConsistencyFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventBridgeScheduleRule.Arn



  ###  API Gateway  ###
  DataConsistencyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: davis-DataConsistencyLambda
      EndpointConfiguration:
        Types: [REGIONAL]   # Regional endpoint (public IPv4 by default)

  # /check-consistency
  CheckConsistencyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref DataConsistencyApi
      ParentId: !GetAtt DataConsistencyApi.RootResourceId
      PathPart: check-consistency

  # /check-consistency resource POST method
  PostCheckConsistencyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref DataConsistencyApi
      ResourceId: !Ref CheckConsistencyResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        # Type: AWS_PROXY    # <-- Lambda proxy integration
        Type: AWS      # <-- non-proxy
        IntegrationHttpMethod: POST
        Uri: !Sub >
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/
          ${DataConsistencyFunction.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH   # "Request body passthrough (recommended)"
        RequestTemplates:
          application/json: |
            {
              "detail-type": "APIGatewayInvoke",
              "requestContext": $input.json('$.requestContext'),
              "path": "$context.resourcePath",
              "httpMethod": "$context.httpMethod",
              "queryStringParameters": $input.json('$.queryStringParameters'),
              "headers": $input.json('$.headers'),
              "body": $input.body
            }
        # Map Lambda result back to HTTP 200 and return its "body" field
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: $input.json('$.body')
        TimeoutInMillis: 29000   # max 29s
      
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty

  # Deployment + Stage
  DataConsistencyDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PostCheckConsistencyMethod
    Properties:
      RestApiId: !Ref DataConsistencyApi
      Description: "Deployment for davis-DataConsistencyLambda (non-proxy)"

  DataConsistencyStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref DataConsistencyApi
      DeploymentId: !Ref DataConsistencyDeployment
      StageName: prod
      Description: "Prod stage for DataConsistency API"

  # Allow API Gateway to invoke the Lambda
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DataConsistencyFunction
      Principal: apigateway.amazonaws.com
      # Limit to this API resource only
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DataConsistencyApi}/*/*/*











Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC

  LoadBalancerDNS:
    Description: DNS name of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  RDSInstanceEndpoint:
    Description: RDS instance endpoint
    Value: !GetAtt RDSInstance.Endpoint.Address

  APIGatewayDataConsistencyLambdaUrl:
    Description: "Invoke URL for POST /check-consistency"
    Value: !Sub "https://${DataConsistencyApi}.execute-api.${AWS::Region}.amazonaws.com/${DataConsistencyStage.StageName}/check-consistency"